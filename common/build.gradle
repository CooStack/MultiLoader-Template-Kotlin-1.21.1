plugins {
    id 'multiloader-common'
    id 'net.neoforged.moddev'
    id 'org.jetbrains.kotlin.jvm'
}

neoForge {
    neoFormVersion = neo_form_version
    // Automatically enable AccessTransformers if the file exists
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}
tasks.javadoc {
    // fuck javadoc encode error
    enabled = false
}
dependencies {
    compileOnly group: 'org.spongepowered', name: 'mixin', version: '0.8.5'
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"
    compileOnly "org.ow2.asm:asm:9.7"
    // ASM tree API（包含 ClassNode 等）
    compileOnly "org.ow2.asm:asm-tree:9.7"
    // fabric and neoforge both bundle mixinextras, so it is safe to use it in common
    compileOnly group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'
    annotationProcessor group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'

}
tasks.named('jar', Jar) {
    destinationDirectory.set(file("../builds/jar")) // 输出到 build/customLibs
    archiveFileName.set("${rootProject.mod_name}-Common-${rootProject.minecraft_version}-${rootProject.version}.jar")
}
configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

